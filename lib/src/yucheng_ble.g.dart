// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum YuchengSleepType {
  rem,
  deep,
  awake,
  light,
  unknown,
}

enum YuchengDeviceState {
  unknown,
  connected,
  connectedFailed,
  disconnected,
  unavailable,
  readWriteOK,
  timeOut,
}

class YuchengDeviceSettings {
  YuchengDeviceSettings({
    required this.batteryValue,
  });

  int batteryValue;

  List<Object?> _toList() {
    return <Object?>[
      batteryValue,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceSettings decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceSettings(
      batteryValue: result[0]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceSettings || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepData {
  YuchengSleepData({
    required this.startTimeStamp,
    required this.endTimeStamp,
    required this.deepCount,
    required this.lightCount,
    required this.awakeCount,
    required this.deepInSeconds,
    required this.remInSeconds,
    required this.lightInSeconds,
    required this.awakeInSeconds,
    required this.details,
  });

  /// Начало сна в мс
  int startTimeStamp;

  /// Конец сна в мс
  int endTimeStamp;

  /// Если равен 0xFFFF, то новый формат в секундах, иначе старый в минутах
  int deepCount;

  int lightCount;

  int awakeCount;

  int deepInSeconds;

  int remInSeconds;

  int lightInSeconds;

  int awakeInSeconds;

  List<YuchengSleepDataDetail> details;

  List<Object?> _toList() {
    return <Object?>[
      startTimeStamp,
      endTimeStamp,
      deepCount,
      lightCount,
      awakeCount,
      deepInSeconds,
      remInSeconds,
      lightInSeconds,
      awakeInSeconds,
      details,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepData decode(Object result) {
    result as List<Object?>;
    return YuchengSleepData(
      startTimeStamp: result[0]! as int,
      endTimeStamp: result[1]! as int,
      deepCount: result[2]! as int,
      lightCount: result[3]! as int,
      awakeCount: result[4]! as int,
      deepInSeconds: result[5]! as int,
      remInSeconds: result[6]! as int,
      lightInSeconds: result[7]! as int,
      awakeInSeconds: result[8]! as int,
      details: (result[9] as List<Object?>?)!.cast<YuchengSleepDataDetail>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengHealthData {
  YuchengHealthData({
    required this.heartValue,
    required this.hrvValue,
    required this.cvrrValue,
    required this.OOValue,
    required this.stepValue,
    required this.DBPValue,
    required this.tempIntValue,
    required this.tempFloatValue,
    required this.startTimestamp,
    required this.SBPValue,
    required this.respiratoryRateValue,
    required this.bodyFatIntValue,
    required this.bodyFatFloatValue,
    required this.bloodSugarValue,
  });

  int heartValue;

  int hrvValue;

  int cvrrValue;

  int OOValue;

  int stepValue;

  int DBPValue;

  int tempIntValue;

  int tempFloatValue;

  int startTimestamp;

  int SBPValue;

  int respiratoryRateValue;

  int bodyFatIntValue;

  int bodyFatFloatValue;

  int bloodSugarValue;

  List<Object?> _toList() {
    return <Object?>[
      heartValue,
      hrvValue,
      cvrrValue,
      OOValue,
      stepValue,
      DBPValue,
      tempIntValue,
      tempFloatValue,
      startTimestamp,
      SBPValue,
      respiratoryRateValue,
      bodyFatIntValue,
      bodyFatFloatValue,
      bloodSugarValue,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengHealthData decode(Object result) {
    result as List<Object?>;
    return YuchengHealthData(
      heartValue: result[0]! as int,
      hrvValue: result[1]! as int,
      cvrrValue: result[2]! as int,
      OOValue: result[3]! as int,
      stepValue: result[4]! as int,
      DBPValue: result[5]! as int,
      tempIntValue: result[6]! as int,
      tempFloatValue: result[7]! as int,
      startTimestamp: result[8]! as int,
      SBPValue: result[9]! as int,
      respiratoryRateValue: result[10]! as int,
      bodyFatIntValue: result[11]! as int,
      bodyFatFloatValue: result[12]! as int,
      bloodSugarValue: result[13]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengHealthData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepHealthData {
  YuchengSleepHealthData({
    required this.sleepData,
    required this.healthData,
  });

  List<YuchengSleepData> sleepData;

  List<YuchengHealthData> healthData;

  List<Object?> _toList() {
    return <Object?>[
      sleepData,
      healthData,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepHealthData decode(Object result) {
    result as List<Object?>;
    return YuchengSleepHealthData(
      sleepData: (result[0] as List<Object?>?)!.cast<YuchengSleepData>(),
      healthData: (result[1] as List<Object?>?)!.cast<YuchengHealthData>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepHealthData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class YuchengSleepEvent {
}

class YuchengSleepTimeOutEvent extends YuchengSleepEvent {
  YuchengSleepTimeOutEvent({
    required this.isTimeout,
  });

  bool isTimeout;

  List<Object?> _toList() {
    return <Object?>[
      isTimeout,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepTimeOutEvent decode(Object result) {
    result as List<Object?>;
    return YuchengSleepTimeOutEvent(
      isTimeout: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepTimeOutEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepDataEvent extends YuchengSleepEvent {
  YuchengSleepDataEvent({
    required this.sleepData,
  });

  YuchengSleepData sleepData;

  List<Object?> _toList() {
    return <Object?>[
      sleepData,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepDataEvent decode(Object result) {
    result as List<Object?>;
    return YuchengSleepDataEvent(
      sleepData: result[0]! as YuchengSleepData,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepDataEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepDataDetail {
  YuchengSleepDataDetail({
    required this.startTimeStamp,
    required this.duration,
    required this.type,
  });

  /// Начало в мс
  int startTimeStamp;

  /// Длительность в мс
  int duration;

  /// Тип сна
  YuchengSleepType type;

  List<Object?> _toList() {
    return <Object?>[
      startTimeStamp,
      duration,
      type,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepDataDetail decode(Object result) {
    result as List<Object?>;
    return YuchengSleepDataDetail(
      startTimeStamp: result[0]! as int,
      duration: result[1]! as int,
      type: result[2]! as YuchengSleepType,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepDataDetail || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepErrorEvent extends YuchengSleepEvent {
  YuchengSleepErrorEvent({
    required this.error,
  });

  String error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepErrorEvent decode(Object result) {
    result as List<Object?>;
    return YuchengSleepErrorEvent(
      error: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepErrorEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class YuchengDeviceStateEvent {
}

class YuchengDeviceStateTimeOutEvent extends YuchengDeviceStateEvent {
  YuchengDeviceStateTimeOutEvent({
    required this.isTimeout,
  });

  bool isTimeout;

  List<Object?> _toList() {
    return <Object?>[
      isTimeout,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceStateTimeOutEvent decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceStateTimeOutEvent(
      isTimeout: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceStateTimeOutEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengDeviceStateDataEvent extends YuchengDeviceStateEvent {
  YuchengDeviceStateDataEvent({
    required this.state,
  });

  YuchengDeviceState state;

  List<Object?> _toList() {
    return <Object?>[
      state,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceStateDataEvent decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceStateDataEvent(
      state: result[0]! as YuchengDeviceState,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceStateDataEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengDeviceStateErrorEvent extends YuchengDeviceStateEvent {
  YuchengDeviceStateErrorEvent({
    required this.state,
    required this.error,
  });

  YuchengDeviceState state;

  String error;

  List<Object?> _toList() {
    return <Object?>[
      state,
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceStateErrorEvent decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceStateErrorEvent(
      state: result[0]! as YuchengDeviceState,
      error: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceStateErrorEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengDevice {
  YuchengDevice({
    required this.index,
    required this.deviceName,
    required this.uuid,
    required this.isReconnected,
  });

  int index;

  String deviceName;

  /// Android - тут mac address для подключения
  /// IOS - uuid девайса
  String uuid;

  /// true - уже изначально подключен
  /// false - не был подключен изначально, нужно подключить
  bool isReconnected;

  List<Object?> _toList() {
    return <Object?>[
      index,
      deviceName,
      uuid,
      isReconnected,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDevice decode(Object result) {
    result as List<Object?>;
    return YuchengDevice(
      index: result[0]! as int,
      deviceName: result[1]! as String,
      uuid: result[2]! as String,
      isReconnected: result[3]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDevice || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class YuchengDeviceEvent {
}

class YuchengDeviceTimeOutEvent extends YuchengDeviceEvent {
  YuchengDeviceTimeOutEvent({
    required this.isTimeout,
  });

  bool isTimeout;

  List<Object?> _toList() {
    return <Object?>[
      isTimeout,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceTimeOutEvent decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceTimeOutEvent(
      isTimeout: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceTimeOutEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengDeviceDataEvent extends YuchengDeviceEvent {
  YuchengDeviceDataEvent({
    required this.index,
    required this.mac,
    required this.isReconnected,
    required this.deviceName,
  });

  int index;

  /// ДЛЯ ANDROID
  /// Нужен, чтобы подключиться к девайсу
  String mac;

  /// Только IOS
  /// true - уже изначально подключен
  /// false - не был подключен изначально, нужно подключить
  bool isReconnected;

  String deviceName;

  List<Object?> _toList() {
    return <Object?>[
      index,
      mac,
      isReconnected,
      deviceName,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceDataEvent decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceDataEvent(
      index: result[0]! as int,
      mac: result[1]! as String,
      isReconnected: result[2]! as bool,
      deviceName: result[3]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceDataEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengDeviceCompleteEvent extends YuchengDeviceEvent {
  YuchengDeviceCompleteEvent({
    required this.completed,
  });

  bool completed;

  List<Object?> _toList() {
    return <Object?>[
      completed,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengDeviceCompleteEvent decode(Object result) {
    result as List<Object?>;
    return YuchengDeviceCompleteEvent(
      completed: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengDeviceCompleteEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class YuchengHealthEvent {
}

class YuchengHealthDataEvent extends YuchengHealthEvent {
  YuchengHealthDataEvent({
    required this.healthData,
  });

  YuchengHealthData healthData;

  List<Object?> _toList() {
    return <Object?>[
      healthData,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengHealthDataEvent decode(Object result) {
    result as List<Object?>;
    return YuchengHealthDataEvent(
      healthData: result[0]! as YuchengHealthData,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengHealthDataEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengHealthErrorEvent extends YuchengHealthEvent {
  YuchengHealthErrorEvent({
    required this.error,
  });

  String error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengHealthErrorEvent decode(Object result) {
    result as List<Object?>;
    return YuchengHealthErrorEvent(
      error: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengHealthErrorEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengHealthTimeOutEvent extends YuchengHealthEvent {
  YuchengHealthTimeOutEvent({
    required this.isTimeout,
  });

  bool isTimeout;

  List<Object?> _toList() {
    return <Object?>[
      isTimeout,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengHealthTimeOutEvent decode(Object result) {
    result as List<Object?>;
    return YuchengHealthTimeOutEvent(
      isTimeout: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengHealthTimeOutEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class YuchengSleepHealthEvent {
}

class YuchengSleepHealthDataEvent extends YuchengSleepHealthEvent {
  YuchengSleepHealthDataEvent({
    required this.data,
  });

  YuchengSleepHealthData data;

  List<Object?> _toList() {
    return <Object?>[
      data,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepHealthDataEvent decode(Object result) {
    result as List<Object?>;
    return YuchengSleepHealthDataEvent(
      data: result[0]! as YuchengSleepHealthData,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepHealthDataEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepHealthErrorEvent extends YuchengSleepHealthEvent {
  YuchengSleepHealthErrorEvent({
    required this.error,
  });

  String error;

  List<Object?> _toList() {
    return <Object?>[
      error,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepHealthErrorEvent decode(Object result) {
    result as List<Object?>;
    return YuchengSleepHealthErrorEvent(
      error: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepHealthErrorEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class YuchengSleepHealthTimeOutEvent extends YuchengSleepHealthEvent {
  YuchengSleepHealthTimeOutEvent({
    required this.isTimeout,
  });

  bool isTimeout;

  List<Object?> _toList() {
    return <Object?>[
      isTimeout,
    ];
  }

  Object encode() {
    return _toList();  }

  static YuchengSleepHealthTimeOutEvent decode(Object result) {
    result as List<Object?>;
    return YuchengSleepHealthTimeOutEvent(
      isTimeout: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! YuchengSleepHealthTimeOutEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is YuchengSleepType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is YuchengDeviceState) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is YuchengDeviceSettings) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengHealthData) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepHealthData) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepTimeOutEvent) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepDataEvent) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepDataDetail) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepErrorEvent) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDeviceStateTimeOutEvent) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDeviceStateDataEvent) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDeviceStateErrorEvent) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDevice) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDeviceTimeOutEvent) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDeviceDataEvent) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengDeviceCompleteEvent) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengHealthDataEvent) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengHealthErrorEvent) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengHealthTimeOutEvent) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepHealthDataEvent) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepHealthErrorEvent) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is YuchengSleepHealthTimeOutEvent) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : YuchengSleepType.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : YuchengDeviceState.values[value];
      case 131: 
        return YuchengDeviceSettings.decode(readValue(buffer)!);
      case 132: 
        return YuchengSleepData.decode(readValue(buffer)!);
      case 133: 
        return YuchengHealthData.decode(readValue(buffer)!);
      case 134: 
        return YuchengSleepHealthData.decode(readValue(buffer)!);
      case 135: 
        return YuchengSleepTimeOutEvent.decode(readValue(buffer)!);
      case 136: 
        return YuchengSleepDataEvent.decode(readValue(buffer)!);
      case 137: 
        return YuchengSleepDataDetail.decode(readValue(buffer)!);
      case 138: 
        return YuchengSleepErrorEvent.decode(readValue(buffer)!);
      case 139: 
        return YuchengDeviceStateTimeOutEvent.decode(readValue(buffer)!);
      case 140: 
        return YuchengDeviceStateDataEvent.decode(readValue(buffer)!);
      case 141: 
        return YuchengDeviceStateErrorEvent.decode(readValue(buffer)!);
      case 142: 
        return YuchengDevice.decode(readValue(buffer)!);
      case 143: 
        return YuchengDeviceTimeOutEvent.decode(readValue(buffer)!);
      case 144: 
        return YuchengDeviceDataEvent.decode(readValue(buffer)!);
      case 145: 
        return YuchengDeviceCompleteEvent.decode(readValue(buffer)!);
      case 146: 
        return YuchengHealthDataEvent.decode(readValue(buffer)!);
      case 147: 
        return YuchengHealthErrorEvent.decode(readValue(buffer)!);
      case 148: 
        return YuchengHealthTimeOutEvent.decode(readValue(buffer)!);
      case 149: 
        return YuchengSleepHealthDataEvent.decode(readValue(buffer)!);
      case 150: 
        return YuchengSleepHealthErrorEvent.decode(readValue(buffer)!);
      case 151: 
        return YuchengSleepHealthTimeOutEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

class YuchengHostApi {
  /// Constructor for [YuchengHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  YuchengHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// [scanTimeInMs] - сколько по времени сканировать (по умолчанию 3 секунды для ios и 10 для андройд)
  /// Прослушивать стрим devices
  ///
  /// Перед сканированием нужно проверить, включен ли bluetooth и запросить разрешения
  /// на bluetooth
  Future<List<YuchengDevice>> startScanDevices(double? scanTimeInSeconds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.startScanDevices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[scanTimeInSeconds]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<YuchengDevice>();
    }
  }

  /// Работает для IOS, для андройд будет просто проверка, подключен ли какой-либо девайс к сдк
  /// [device] - девайс, который нужно проверить
  /// Проверяет, подключен ли данный девайс
  Future<bool> isDeviceConnected(YuchengDevice? device) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.isDeviceConnected$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[device]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Подключить девайс к сдк
  Future<bool> connect(YuchengDevice device, int? connectTimeInSeconds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.connect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[device, connectTimeInSeconds]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> reconnect(int? reconnectTimeInSeconds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.reconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[reconnectTimeInSeconds]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Отключить девайс от сдк
  Future<void> disconnect() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Запрос на получение данных о сне
  /// Можно также прослушивать стрим sleepData
  Future<List<YuchengSleepData>> getSleepData({int? startTimestamp, int? endTimestamp}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getSleepData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[startTimestamp, endTimestamp]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<YuchengSleepData>();
    }
  }

  /// Возвращает текущий подключенный девайс
  Future<YuchengDevice?> getCurrentConnectedDevice() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getCurrentConnectedDevice$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as YuchengDevice?);
    }
  }

  Future<List<YuchengHealthData>> getHealthData({int? startTimestamp, int? endTimestamp}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getHealthData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[startTimestamp, endTimestamp]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<YuchengHealthData>();
    }
  }

  Future<YuchengSleepHealthData> getSleepHealthData({int? startTimestamp, int? endTimestamp}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getSleepHealthData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[startTimestamp, endTimestamp]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as YuchengSleepHealthData?)!;
    }
  }

  Future<YuchengDeviceSettings?> getDeviceSettings() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getDeviceSettings$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as YuchengDeviceSettings?);
    }
  }

  Future<bool> deleteSleepData() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.deleteSleepData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> deleteHealthData() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.deleteHealthData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> deleteSleepHealthData() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.yucheng_ble.YuchengHostApi.deleteSleepHealthData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }
}

Stream<YuchengDeviceEvent> devices( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel devicesChannel =
      EventChannel('dev.flutter.pigeon.yucheng_ble.YuchengStreamApi.devices$instanceName', pigeonMethodCodec);
  return devicesChannel.receiveBroadcastStream().map((dynamic event) {
    return event as YuchengDeviceEvent;
  });
}
    
Stream<YuchengSleepEvent> sleepData( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel sleepDataChannel =
      EventChannel('dev.flutter.pigeon.yucheng_ble.YuchengStreamApi.sleepData$instanceName', pigeonMethodCodec);
  return sleepDataChannel.receiveBroadcastStream().map((dynamic event) {
    return event as YuchengSleepEvent;
  });
}
    
Stream<YuchengDeviceStateEvent> deviceState( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel deviceStateChannel =
      EventChannel('dev.flutter.pigeon.yucheng_ble.YuchengStreamApi.deviceState$instanceName', pigeonMethodCodec);
  return deviceStateChannel.receiveBroadcastStream().map((dynamic event) {
    return event as YuchengDeviceStateEvent;
  });
}
    
Stream<YuchengHealthEvent> healthData( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel healthDataChannel =
      EventChannel('dev.flutter.pigeon.yucheng_ble.YuchengStreamApi.healthData$instanceName', pigeonMethodCodec);
  return healthDataChannel.receiveBroadcastStream().map((dynamic event) {
    return event as YuchengHealthEvent;
  });
}
    
Stream<YuchengSleepHealthEvent> sleepHealthData( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel sleepHealthDataChannel =
      EventChannel('dev.flutter.pigeon.yucheng_ble.YuchengStreamApi.sleepHealthData$instanceName', pigeonMethodCodec);
  return sleepHealthDataChannel.receiveBroadcastStream().map((dynamic event) {
    return event as YuchengSleepHealthEvent;
  });
}
    
