// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, PGNYuchengSleepType) {
  PGNYuchengSleepTypeRem = 0,
  PGNYuchengSleepTypeDeep = 1,
  PGNYuchengSleepTypeAwake = 2,
  PGNYuchengSleepTypeLight = 3,
  PGNYuchengSleepTypeUnknown = 4,
};

/// Wrapper for PGNYuchengSleepType to allow for nullability.
@interface PGNYuchengSleepTypeBox : NSObject
@property(nonatomic, assign) PGNYuchengSleepType value;
- (instancetype)initWithValue:(PGNYuchengSleepType)value;
@end

typedef NS_ENUM(NSUInteger, PGNYuchengProductState) {
  PGNYuchengProductStateUnknown = 0,
  PGNYuchengProductStateConnected = 1,
  PGNYuchengProductStateConnectedFailed = 2,
  PGNYuchengProductStateDisconnected = 3,
  PGNYuchengProductStateUnavailable = 4,
  PGNYuchengProductStateTimeOut = 5,
};

/// Wrapper for PGNYuchengProductState to allow for nullability.
@interface PGNYuchengProductStateBox : NSObject
@property(nonatomic, assign) PGNYuchengProductState value;
- (instancetype)initWithValue:(PGNYuchengProductState)value;
@end

@class PGNYuchengSleepEvent;
@class PGNYuchengSleepDataMinutes;
@class PGNYuchengSleepDataSeconds;
@class PGNYuchengSleepDataEvent;
@class PGNYuchengSleepDataDetail;
@class PGNYuchengSleepErrorEvent;
@class PGNYuchengProductStateEvent;
@class PGNYuchengProductStateDataEvent;
@class PGNYuchengProductStateErrorEvent;
@class PGNYuchengDevice;
@class PGNYuchengDeviceEvent;
@class PGNYuchengDeviceDataEvent;
@class PGNYuchengDeviceCompleteEvent;

@interface PGNYuchengSleepEvent : NSObject
@end

/// Старый формат в минутах
@interface PGNYuchengSleepDataMinutes : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithDeepSleepMinutes:(NSInteger )deepSleepMinutes
    remSleepMinutes:(NSInteger )remSleepMinutes
    lightSleepMinutes:(NSInteger )lightSleepMinutes;
@property(nonatomic, assign) NSInteger  deepSleepMinutes;
@property(nonatomic, assign) NSInteger  remSleepMinutes;
@property(nonatomic, assign) NSInteger  lightSleepMinutes;
@end

/// Если deepSleepCount == 0xFFFF, то новый формат в секундах
@interface PGNYuchengSleepDataSeconds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithDeepSleepSeconds:(NSInteger )deepSleepSeconds
    remSleepSeconds:(NSInteger )remSleepSeconds
    lightSleepSeconds:(NSInteger )lightSleepSeconds;
@property(nonatomic, assign) NSInteger  deepSleepSeconds;
@property(nonatomic, assign) NSInteger  remSleepSeconds;
@property(nonatomic, assign) NSInteger  lightSleepSeconds;
@end

@interface PGNYuchengSleepDataEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStartTimeStamp:(NSInteger )startTimeStamp
    endTimeStamp:(NSInteger )endTimeStamp
    deepSleepCount:(NSInteger )deepSleepCount
    lightSleepCount:(NSInteger )lightSleepCount
    minutes:(nullable PGNYuchengSleepDataMinutes *)minutes
    seconds:(nullable PGNYuchengSleepDataSeconds *)seconds
    details:(NSArray<PGNYuchengSleepDataDetail *> *)details;
/// Начало сна в мс
@property(nonatomic, assign) NSInteger  startTimeStamp;
/// Конец сна в мс
@property(nonatomic, assign) NSInteger  endTimeStamp;
/// Если равен 0xFFFF, то новый формат в секундах, иначе старый в минутах
@property(nonatomic, assign) NSInteger  deepSleepCount;
@property(nonatomic, assign) NSInteger  lightSleepCount;
/// Старый формат, если [deepSleepCount] != 0xFFFF
@property(nonatomic, strong, nullable) PGNYuchengSleepDataMinutes * minutes;
/// Новый формат, если [deepSleepCount] == 0xFFFF
@property(nonatomic, strong, nullable) PGNYuchengSleepDataSeconds * seconds;
@property(nonatomic, copy) NSArray<PGNYuchengSleepDataDetail *> * details;
@end

@interface PGNYuchengSleepDataDetail : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStartTimeStamp:(NSInteger )startTimeStamp
    duration:(NSInteger )duration
    type:(PGNYuchengSleepType)type;
/// Начало в мс
@property(nonatomic, assign) NSInteger  startTimeStamp;
/// Длительность в мс
@property(nonatomic, assign) NSInteger  duration;
/// Тип сна
@property(nonatomic, assign) PGNYuchengSleepType type;
@end

@interface PGNYuchengSleepErrorEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithError:(NSString *)error;
@property(nonatomic, copy) NSString * error;
@end

@interface PGNYuchengProductStateEvent : NSObject
@end

@interface PGNYuchengProductStateDataEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithState:(PGNYuchengProductState)state;
@property(nonatomic, assign) PGNYuchengProductState state;
@end

@interface PGNYuchengProductStateErrorEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithState:(PGNYuchengProductState)state
    error:(NSString *)error;
@property(nonatomic, assign) PGNYuchengProductState state;
@property(nonatomic, copy) NSString * error;
@end

@interface PGNYuchengDevice : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIndex:(NSInteger )index
    deviceName:(NSString *)deviceName
    uuid:(NSString *)uuid
    isCurrentConnected:(BOOL )isCurrentConnected;
@property(nonatomic, assign) NSInteger  index;
@property(nonatomic, copy) NSString * deviceName;
@property(nonatomic, copy) NSString * uuid;
/// true - уже изначально подключен
/// false - не был подключен изначально, нужно подключить
@property(nonatomic, assign) BOOL  isCurrentConnected;
@end

@interface PGNYuchengDeviceEvent : NSObject
@end

@interface PGNYuchengDeviceDataEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIndex:(NSInteger )index
    uuid:(NSString *)uuid
    isCurrentConnected:(BOOL )isCurrentConnected
    deviceName:(NSString *)deviceName;
@property(nonatomic, assign) NSInteger  index;
@property(nonatomic, copy) NSString * uuid;
/// true - уже изначально подключен
/// false - не был подключен изначально, нужно подключить
@property(nonatomic, assign) BOOL  isCurrentConnected;
@property(nonatomic, copy) NSString * deviceName;
@end

@interface PGNYuchengDeviceCompleteEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCompleted:(BOOL )completed;
@property(nonatomic, assign) BOOL  completed;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *PGNGetYuchengBleApiCodec(void);

@protocol PGNYuchengHostApi
/// [scanTimeInMs] - сколько по времени сканировать (по умолчанию 3 секунды)
/// Прослушивать стрим devices
///
/// Перед сканированием нужно проверить, включен ли bluetooth и запросить разрешения
/// на bluetooth
- (void)startScanDevicesScanTimeInSeconds:(nullable NSNumber *)scanTimeInSeconds error:(FlutterError *_Nullable *_Nonnull)error;
/// [device] - девайс, который нужно проверить
/// Проверяет, подключен ли данный девайс
- (void)isDeviceConnectedDevice:(PGNYuchengDevice *)device completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Подключить девайс к сдк
- (void)connectDevice:(nullable PGNYuchengDevice *)device completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Отключить девайс от сдк
- (void)disconnectWithCompletion:(void (^)(FlutterError *_Nullable))completion;
/// Запрос на получение данных о сне
/// Можно также прослушивать стрим sleepData
- (void)getSleepDataWithCompletion:(void (^)(NSArray<PGNYuchengSleepDataEvent *> *_Nullable, FlutterError *_Nullable))completion;
/// Возвращает текущий подключенный девайс
/// Если девайс был подключен до этого и не был отключен, то сдк пытается подключиться
/// к девайсу повторно и возвращает его
- (void)getCurrentConnectedDeviceWithCompletion:(void (^)(PGNYuchengDevice *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpPGNYuchengHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNYuchengHostApi> *_Nullable api);

extern void SetUpPGNYuchengHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNYuchengHostApi> *_Nullable api, NSString *messageChannelSuffix);

NS_ASSUME_NONNULL_END
