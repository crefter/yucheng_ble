// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "yucheng_ble_api.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation PGNYuchengSleepTypeBox
- (instancetype)initWithValue:(PGNYuchengSleepType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation PGNYuchengProductStateBox
- (instancetype)initWithValue:(PGNYuchengProductState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface PGNYuchengSleepEvent ()
+ (PGNYuchengSleepEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengSleepEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengSleepDataMinutes ()
+ (PGNYuchengSleepDataMinutes *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengSleepDataMinutes *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengSleepDataSeconds ()
+ (PGNYuchengSleepDataSeconds *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengSleepDataSeconds *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengSleepDataEvent ()
+ (PGNYuchengSleepDataEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengSleepDataEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengSleepDataDetail ()
+ (PGNYuchengSleepDataDetail *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengSleepDataDetail *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengSleepErrorEvent ()
+ (PGNYuchengSleepErrorEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengSleepErrorEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengProductStateEvent ()
+ (PGNYuchengProductStateEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengProductStateEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengProductStateDataEvent ()
+ (PGNYuchengProductStateDataEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengProductStateDataEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengProductStateErrorEvent ()
+ (PGNYuchengProductStateErrorEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengProductStateErrorEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengDevice ()
+ (PGNYuchengDevice *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengDevice *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengDeviceEvent ()
+ (PGNYuchengDeviceEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengDeviceEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengDeviceDataEvent ()
+ (PGNYuchengDeviceDataEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengDeviceDataEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNYuchengDeviceCompleteEvent ()
+ (PGNYuchengDeviceCompleteEvent *)fromList:(NSArray<id> *)list;
+ (nullable PGNYuchengDeviceCompleteEvent *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation PGNYuchengSleepEvent
+ (instancetype)makeWith {
  PGNYuchengSleepEvent* pigeonResult = [[PGNYuchengSleepEvent alloc] init];
  return pigeonResult;
}
+ (PGNYuchengSleepEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengSleepEvent *pigeonResult = [[PGNYuchengSleepEvent alloc] init];
  return pigeonResult;
}
+ (nullable PGNYuchengSleepEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengSleepEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
  ];
}
@end

@implementation PGNYuchengSleepDataMinutes
+ (instancetype)makeWithDeepSleepMinutes:(NSInteger )deepSleepMinutes
    remSleepMinutes:(NSInteger )remSleepMinutes
    lightSleepMinutes:(NSInteger )lightSleepMinutes {
  PGNYuchengSleepDataMinutes* pigeonResult = [[PGNYuchengSleepDataMinutes alloc] init];
  pigeonResult.deepSleepMinutes = deepSleepMinutes;
  pigeonResult.remSleepMinutes = remSleepMinutes;
  pigeonResult.lightSleepMinutes = lightSleepMinutes;
  return pigeonResult;
}
+ (PGNYuchengSleepDataMinutes *)fromList:(NSArray<id> *)list {
  PGNYuchengSleepDataMinutes *pigeonResult = [[PGNYuchengSleepDataMinutes alloc] init];
  pigeonResult.deepSleepMinutes = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.remSleepMinutes = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.lightSleepMinutes = [GetNullableObjectAtIndex(list, 2) integerValue];
  return pigeonResult;
}
+ (nullable PGNYuchengSleepDataMinutes *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengSleepDataMinutes fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.deepSleepMinutes),
    @(self.remSleepMinutes),
    @(self.lightSleepMinutes),
  ];
}
@end

@implementation PGNYuchengSleepDataSeconds
+ (instancetype)makeWithDeepSleepSeconds:(NSInteger )deepSleepSeconds
    remSleepSeconds:(NSInteger )remSleepSeconds
    lightSleepSeconds:(NSInteger )lightSleepSeconds {
  PGNYuchengSleepDataSeconds* pigeonResult = [[PGNYuchengSleepDataSeconds alloc] init];
  pigeonResult.deepSleepSeconds = deepSleepSeconds;
  pigeonResult.remSleepSeconds = remSleepSeconds;
  pigeonResult.lightSleepSeconds = lightSleepSeconds;
  return pigeonResult;
}
+ (PGNYuchengSleepDataSeconds *)fromList:(NSArray<id> *)list {
  PGNYuchengSleepDataSeconds *pigeonResult = [[PGNYuchengSleepDataSeconds alloc] init];
  pigeonResult.deepSleepSeconds = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.remSleepSeconds = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.lightSleepSeconds = [GetNullableObjectAtIndex(list, 2) integerValue];
  return pigeonResult;
}
+ (nullable PGNYuchengSleepDataSeconds *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengSleepDataSeconds fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.deepSleepSeconds),
    @(self.remSleepSeconds),
    @(self.lightSleepSeconds),
  ];
}
@end

@implementation PGNYuchengSleepDataEvent
+ (instancetype)makeWithStartTimeStamp:(NSInteger )startTimeStamp
    endTimeStamp:(NSInteger )endTimeStamp
    deepSleepCount:(NSInteger )deepSleepCount
    lightSleepCount:(NSInteger )lightSleepCount
    minutes:(nullable PGNYuchengSleepDataMinutes *)minutes
    seconds:(nullable PGNYuchengSleepDataSeconds *)seconds
    details:(NSArray<PGNYuchengSleepDataDetail *> *)details {
  PGNYuchengSleepDataEvent* pigeonResult = [[PGNYuchengSleepDataEvent alloc] init];
  pigeonResult.startTimeStamp = startTimeStamp;
  pigeonResult.endTimeStamp = endTimeStamp;
  pigeonResult.deepSleepCount = deepSleepCount;
  pigeonResult.lightSleepCount = lightSleepCount;
  pigeonResult.minutes = minutes;
  pigeonResult.seconds = seconds;
  pigeonResult.details = details;
  return pigeonResult;
}
+ (PGNYuchengSleepDataEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengSleepDataEvent *pigeonResult = [[PGNYuchengSleepDataEvent alloc] init];
  pigeonResult.startTimeStamp = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.endTimeStamp = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.deepSleepCount = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.lightSleepCount = [GetNullableObjectAtIndex(list, 3) integerValue];
  pigeonResult.minutes = GetNullableObjectAtIndex(list, 4);
  pigeonResult.seconds = GetNullableObjectAtIndex(list, 5);
  pigeonResult.details = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable PGNYuchengSleepDataEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengSleepDataEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.startTimeStamp),
    @(self.endTimeStamp),
    @(self.deepSleepCount),
    @(self.lightSleepCount),
    self.minutes ?: [NSNull null],
    self.seconds ?: [NSNull null],
    self.details ?: [NSNull null],
  ];
}
@end

@implementation PGNYuchengSleepDataDetail
+ (instancetype)makeWithStartTimeStamp:(NSInteger )startTimeStamp
    duration:(NSInteger )duration
    type:(PGNYuchengSleepType)type {
  PGNYuchengSleepDataDetail* pigeonResult = [[PGNYuchengSleepDataDetail alloc] init];
  pigeonResult.startTimeStamp = startTimeStamp;
  pigeonResult.duration = duration;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (PGNYuchengSleepDataDetail *)fromList:(NSArray<id> *)list {
  PGNYuchengSleepDataDetail *pigeonResult = [[PGNYuchengSleepDataDetail alloc] init];
  pigeonResult.startTimeStamp = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.duration = [GetNullableObjectAtIndex(list, 1) integerValue];
  PGNYuchengSleepTypeBox *boxedPGNYuchengSleepType = GetNullableObjectAtIndex(list, 2);
  pigeonResult.type = boxedPGNYuchengSleepType.value;
  return pigeonResult;
}
+ (nullable PGNYuchengSleepDataDetail *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengSleepDataDetail fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.startTimeStamp),
    @(self.duration),
    [[PGNYuchengSleepTypeBox alloc] initWithValue:self.type],
  ];
}
@end

@implementation PGNYuchengSleepErrorEvent
+ (instancetype)makeWithError:(NSString *)error {
  PGNYuchengSleepErrorEvent* pigeonResult = [[PGNYuchengSleepErrorEvent alloc] init];
  pigeonResult.error = error;
  return pigeonResult;
}
+ (PGNYuchengSleepErrorEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengSleepErrorEvent *pigeonResult = [[PGNYuchengSleepErrorEvent alloc] init];
  pigeonResult.error = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable PGNYuchengSleepErrorEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengSleepErrorEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.error ?: [NSNull null],
  ];
}
@end

@implementation PGNYuchengProductStateEvent
+ (instancetype)makeWith {
  PGNYuchengProductStateEvent* pigeonResult = [[PGNYuchengProductStateEvent alloc] init];
  return pigeonResult;
}
+ (PGNYuchengProductStateEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengProductStateEvent *pigeonResult = [[PGNYuchengProductStateEvent alloc] init];
  return pigeonResult;
}
+ (nullable PGNYuchengProductStateEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengProductStateEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
  ];
}
@end

@implementation PGNYuchengProductStateDataEvent
+ (instancetype)makeWithState:(PGNYuchengProductState)state {
  PGNYuchengProductStateDataEvent* pigeonResult = [[PGNYuchengProductStateDataEvent alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (PGNYuchengProductStateDataEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengProductStateDataEvent *pigeonResult = [[PGNYuchengProductStateDataEvent alloc] init];
  PGNYuchengProductStateBox *boxedPGNYuchengProductState = GetNullableObjectAtIndex(list, 0);
  pigeonResult.state = boxedPGNYuchengProductState.value;
  return pigeonResult;
}
+ (nullable PGNYuchengProductStateDataEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengProductStateDataEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[PGNYuchengProductStateBox alloc] initWithValue:self.state],
  ];
}
@end

@implementation PGNYuchengProductStateErrorEvent
+ (instancetype)makeWithState:(PGNYuchengProductState)state
    error:(NSString *)error {
  PGNYuchengProductStateErrorEvent* pigeonResult = [[PGNYuchengProductStateErrorEvent alloc] init];
  pigeonResult.state = state;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (PGNYuchengProductStateErrorEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengProductStateErrorEvent *pigeonResult = [[PGNYuchengProductStateErrorEvent alloc] init];
  PGNYuchengProductStateBox *boxedPGNYuchengProductState = GetNullableObjectAtIndex(list, 0);
  pigeonResult.state = boxedPGNYuchengProductState.value;
  pigeonResult.error = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PGNYuchengProductStateErrorEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengProductStateErrorEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[PGNYuchengProductStateBox alloc] initWithValue:self.state],
    self.error ?: [NSNull null],
  ];
}
@end

@implementation PGNYuchengDevice
+ (instancetype)makeWithIndex:(NSInteger )index
    deviceName:(NSString *)deviceName
    uuid:(NSString *)uuid
    isCurrentConnected:(BOOL )isCurrentConnected {
  PGNYuchengDevice* pigeonResult = [[PGNYuchengDevice alloc] init];
  pigeonResult.index = index;
  pigeonResult.deviceName = deviceName;
  pigeonResult.uuid = uuid;
  pigeonResult.isCurrentConnected = isCurrentConnected;
  return pigeonResult;
}
+ (PGNYuchengDevice *)fromList:(NSArray<id> *)list {
  PGNYuchengDevice *pigeonResult = [[PGNYuchengDevice alloc] init];
  pigeonResult.index = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.deviceName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.uuid = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isCurrentConnected = [GetNullableObjectAtIndex(list, 3) boolValue];
  return pigeonResult;
}
+ (nullable PGNYuchengDevice *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengDevice fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.index),
    self.deviceName ?: [NSNull null],
    self.uuid ?: [NSNull null],
    @(self.isCurrentConnected),
  ];
}
@end

@implementation PGNYuchengDeviceEvent
+ (instancetype)makeWith {
  PGNYuchengDeviceEvent* pigeonResult = [[PGNYuchengDeviceEvent alloc] init];
  return pigeonResult;
}
+ (PGNYuchengDeviceEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengDeviceEvent *pigeonResult = [[PGNYuchengDeviceEvent alloc] init];
  return pigeonResult;
}
+ (nullable PGNYuchengDeviceEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengDeviceEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
  ];
}
@end

@implementation PGNYuchengDeviceDataEvent
+ (instancetype)makeWithIndex:(NSInteger )index
    uuid:(NSString *)uuid
    isCurrentConnected:(BOOL )isCurrentConnected
    deviceName:(NSString *)deviceName {
  PGNYuchengDeviceDataEvent* pigeonResult = [[PGNYuchengDeviceDataEvent alloc] init];
  pigeonResult.index = index;
  pigeonResult.uuid = uuid;
  pigeonResult.isCurrentConnected = isCurrentConnected;
  pigeonResult.deviceName = deviceName;
  return pigeonResult;
}
+ (PGNYuchengDeviceDataEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengDeviceDataEvent *pigeonResult = [[PGNYuchengDeviceDataEvent alloc] init];
  pigeonResult.index = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.uuid = GetNullableObjectAtIndex(list, 1);
  pigeonResult.isCurrentConnected = [GetNullableObjectAtIndex(list, 2) boolValue];
  pigeonResult.deviceName = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable PGNYuchengDeviceDataEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengDeviceDataEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.index),
    self.uuid ?: [NSNull null],
    @(self.isCurrentConnected),
    self.deviceName ?: [NSNull null],
  ];
}
@end

@implementation PGNYuchengDeviceCompleteEvent
+ (instancetype)makeWithCompleted:(BOOL )completed {
  PGNYuchengDeviceCompleteEvent* pigeonResult = [[PGNYuchengDeviceCompleteEvent alloc] init];
  pigeonResult.completed = completed;
  return pigeonResult;
}
+ (PGNYuchengDeviceCompleteEvent *)fromList:(NSArray<id> *)list {
  PGNYuchengDeviceCompleteEvent *pigeonResult = [[PGNYuchengDeviceCompleteEvent alloc] init];
  pigeonResult.completed = [GetNullableObjectAtIndex(list, 0) boolValue];
  return pigeonResult;
}
+ (nullable PGNYuchengDeviceCompleteEvent *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNYuchengDeviceCompleteEvent fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.completed),
  ];
}
@end

@interface PGNYuchengBleApiPigeonCodecReader : FlutterStandardReader
@end
@implementation PGNYuchengBleApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[PGNYuchengSleepTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[PGNYuchengProductStateBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 131: 
      return [PGNYuchengSleepDataMinutes fromList:[self readValue]];
    case 132: 
      return [PGNYuchengSleepDataSeconds fromList:[self readValue]];
    case 133: 
      return [PGNYuchengSleepDataEvent fromList:[self readValue]];
    case 134: 
      return [PGNYuchengSleepDataDetail fromList:[self readValue]];
    case 135: 
      return [PGNYuchengSleepErrorEvent fromList:[self readValue]];
    case 136: 
      return [PGNYuchengProductStateDataEvent fromList:[self readValue]];
    case 137: 
      return [PGNYuchengProductStateErrorEvent fromList:[self readValue]];
    case 138: 
      return [PGNYuchengDevice fromList:[self readValue]];
    case 139: 
      return [PGNYuchengDeviceDataEvent fromList:[self readValue]];
    case 140: 
      return [PGNYuchengDeviceCompleteEvent fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNYuchengBleApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation PGNYuchengBleApiPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNYuchengSleepTypeBox class]]) {
    PGNYuchengSleepTypeBox *box = (PGNYuchengSleepTypeBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[PGNYuchengProductStateBox class]]) {
    PGNYuchengProductStateBox *box = (PGNYuchengProductStateBox *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[PGNYuchengSleepDataMinutes class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengSleepDataSeconds class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengSleepDataEvent class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengSleepDataDetail class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengSleepErrorEvent class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengProductStateDataEvent class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengProductStateErrorEvent class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengDevice class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengDeviceDataEvent class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNYuchengDeviceCompleteEvent class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNYuchengBleApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNYuchengBleApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNYuchengBleApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNYuchengBleApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNGetYuchengBleApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNYuchengBleApiPigeonCodecReaderWriter *readerWriter = [[PGNYuchengBleApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpPGNYuchengHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNYuchengHostApi> *api) {
  SetUpPGNYuchengHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpPGNYuchengHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNYuchengHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  /// [scanTimeInMs] - сколько по времени сканировать (по умолчанию 3 секунды)
  /// Прослушивать стрим devices
  ///
  /// Перед сканированием нужно проверить, включен ли bluetooth и запросить разрешения
  /// на bluetooth
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.yucheng_ble.YuchengHostApi.startScanDevices", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetYuchengBleApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanDevicesScanTimeInSeconds:error:)], @"PGNYuchengHostApi api (%@) doesn't respond to @selector(startScanDevicesScanTimeInSeconds:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_scanTimeInSeconds = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startScanDevicesScanTimeInSeconds:arg_scanTimeInSeconds error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// [device] - девайс, который нужно проверить
  /// Проверяет, подключен ли данный девайс
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.yucheng_ble.YuchengHostApi.isDeviceConnected", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetYuchengBleApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isDeviceConnectedDevice:completion:)], @"PGNYuchengHostApi api (%@) doesn't respond to @selector(isDeviceConnectedDevice:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        PGNYuchengDevice *arg_device = GetNullableObjectAtIndex(args, 0);
        [api isDeviceConnectedDevice:arg_device completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Подключить девайс к сдк
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.yucheng_ble.YuchengHostApi.connect", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetYuchengBleApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectDevice:completion:)], @"PGNYuchengHostApi api (%@) doesn't respond to @selector(connectDevice:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        PGNYuchengDevice *arg_device = GetNullableObjectAtIndex(args, 0);
        [api connectDevice:arg_device completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Отключить девайс от сдк
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.yucheng_ble.YuchengHostApi.disconnect", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetYuchengBleApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectWithCompletion:)], @"PGNYuchengHostApi api (%@) doesn't respond to @selector(disconnectWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Запрос на получение данных о сне
  /// Можно также прослушивать стрим sleepData
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getSleepData", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetYuchengBleApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSleepDataWithCompletion:)], @"PGNYuchengHostApi api (%@) doesn't respond to @selector(getSleepDataWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getSleepDataWithCompletion:^(NSArray<PGNYuchengSleepDataEvent *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Возвращает текущий подключенный девайс
  /// Если девайс был подключен до этого и не был отключен, то сдк пытается подключиться
  /// к девайсу повторно и возвращает его
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.yucheng_ble.YuchengHostApi.getCurrentConnectedDevice", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetYuchengBleApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCurrentConnectedDeviceWithCompletion:)], @"PGNYuchengHostApi api (%@) doesn't respond to @selector(getCurrentConnectedDeviceWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getCurrentConnectedDeviceWithCompletion:^(PGNYuchengDevice *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
